// Code generated by protoc-gen-redis. DO NOT EDIT.

package cmddb

import (
	"bytes"
	"encoding/gob"
	"fmt"
	"strconv"
	"github.com/gomodule/redigo/redis"
)

// --- Message: User ---

// FieldUser 用于标识 Redis Hash 中的字段编号
type FieldUser uint32

// FieldUser_Id 是字段 Id 对应的 Redis Hash field 编号
const FieldUser_Id FieldUser = 1

// FieldUser_Name 是字段 Name 对应的 Redis Hash field 编号
const FieldUser_Name FieldUser = 2

// FieldUser_Age 是字段 Age 对应的 Redis Hash field 编号
const FieldUser_Age FieldUser = 3

// FieldUserIDs 是所有字段编号常量的集合，类型为 []FieldUser
var FieldUserIDs = []FieldUser{
	FieldUser_Id,
	FieldUser_Name,
	FieldUser_Age,
}

// User 提供针对 User 消息的 Redis 存取操作
type User struct {
	Id uint64

	Name string

	Age uint32
}

// NewUser 创建一个新的 UserDB 实例
func NewUser() *User {
	return &User{}
}

// SetFields 将当前结构体实例的字段值，存储到 Redis Hash 中
// REDBKey: 业务维度 Key
// ida, idb: 用于组成唯一 Hash Key 的两个 uint64 分片维度
// fields: 要存储的字段编号列表，如 FieldUser_Name, FieldUser_Age
func (p *User) SetFields(conn redis.Conn, REDBKey uint32, ida, idb uint64, fields ...FieldUser) error {
	key := fmt.Sprintf("REDB#%d:%d:%d", REDBKey, ida, idb)
	args := []interface{}{key}

	// --- 直存字段: Id ---
	args = append(args, FieldUser_Id, p.Id)

	// --- 直存字段: Name ---
	args = append(args, FieldUser_Name, p.Name)

	// --- 直存字段: Age ---
	args = append(args, FieldUser_Age, p.Age)

	_, err := conn.Do("HSET", args...)
	return err
}

// GetFields 从 Redis Hash 中读取指定字段的值，填充到当前结构体实例中
// REDBKey, ida, idb: 与 SetFields 对应
// fields: 要读取的字段编号列表，如 FieldUser_Name, FieldUser_Age
func (p *User) GetFields(conn redis.Conn, REDBKey uint32, ida, idb uint64, fields ...FieldUser) error {
	key := fmt.Sprintf("REDB#%d:%d:%d", REDBKey, ida, idb)
	args := []interface{}{key}

	args = append(args, FieldUser_Id)

	args = append(args, FieldUser_Name)

	args = append(args, FieldUser_Age)

	reply, err := redis.Values(conn.Do("HMGET", args...))
	if err != nil {
		return fmt.Errorf("HMGET 失败: %v", err)
	}

	// --- 直读字段: Id ---
	{
		val, err := redis.Bytes(reply[0], nil)
		if err != nil && err != redis.ErrNil {
			return fmt.Errorf("读取字段 %s 失败: %v", "Id", err)
		}
		if val != nil {

			if id, err := strconv.ParseUint(string(val), 10, 64); err == nil {
				p.Id = id
			}

		}
	}

	// --- 直读字段: Name ---
	{
		val, err := redis.Bytes(reply[1], nil)
		if err != nil && err != redis.ErrNil {
			return fmt.Errorf("读取字段 %s 失败: %v", "Name", err)
		}
		if val != nil {

			p.Name = string(val)

		}
	}

	// --- 直读字段: Age ---
	{
		val, err := redis.Bytes(reply[2], nil)
		if err != nil && err != redis.ErrNil {
			return fmt.Errorf("读取字段 %s 失败: %v", "Age", err)
		}
		if val != nil {

			if id, err := strconv.ParseUint(string(val), 10, 32); err == nil {
				p.Age = uint32(id)
			}

		}
	}

	return nil
}

// --- Message: User2 ---

// FieldUser2 用于标识 Redis Hash 中的字段编号
type FieldUser2 uint32

// FieldUser2_Id2 是字段 Id2 对应的 Redis Hash field 编号
const FieldUser2_Id2 FieldUser2 = 1

// FieldUser2_Name2 是字段 Name2 对应的 Redis Hash field 编号
const FieldUser2_Name2 FieldUser2 = 2

// FieldUser2_Age2 是字段 Age2 对应的 Redis Hash field 编号
const FieldUser2_Age2 FieldUser2 = 3

// FieldUser2_I32 是字段 I32 对应的 Redis Hash field 编号
const FieldUser2_I32 FieldUser2 = 4

// FieldUser2_I64 是字段 I64 对应的 Redis Hash field 编号
const FieldUser2_I64 FieldUser2 = 5

// FieldUser2_List 是字段 List 对应的 Redis Hash field 编号
const FieldUser2_List FieldUser2 = 6

// FieldUser2_U 是字段 U 对应的 Redis Hash field 编号
const FieldUser2_U FieldUser2 = 7

// FieldUser2_Mp 是字段 Mp 对应的 Redis Hash field 编号
const FieldUser2_Mp FieldUser2 = 8

// FieldUser2IDs 是所有字段编号常量的集合，类型为 []FieldUser2
var FieldUser2IDs = []FieldUser2{
	FieldUser2_Id2,
	FieldUser2_Name2,
	FieldUser2_Age2,
	FieldUser2_I32,
	FieldUser2_I64,
	FieldUser2_List,
	FieldUser2_U,
	FieldUser2_Mp,
}

// User2 提供针对 User2 消息的 Redis 存取操作
type User2 struct {
	Id2 uint64

	Name2 string

	Age2 uint32

	I32 int32

	I64 int64

	List []int32

	U User

	Mp map[uint32]int32
}

// NewUser2 创建一个新的 User2DB 实例
func NewUser2() *User2 {
	return &User2{}
}

// SetFields 将当前结构体实例的字段值，存储到 Redis Hash 中
// REDBKey: 业务维度 Key
// ida, idb: 用于组成唯一 Hash Key 的两个 uint64 分片维度
// fields: 要存储的字段编号列表，如 FieldUser2_Name, FieldUser2_Age
func (p *User2) SetFields(conn redis.Conn, REDBKey uint32, ida, idb uint64, fields ...FieldUser2) error {
	key := fmt.Sprintf("REDB#%d:%d:%d", REDBKey, ida, idb)
	args := []interface{}{key}

	// --- 直存字段: Id2 ---
	args = append(args, FieldUser2_Id2, p.Id2)

	// --- 直存字段: Name2 ---
	args = append(args, FieldUser2_Name2, p.Name2)

	// --- 直存字段: Age2 ---
	args = append(args, FieldUser2_Age2, p.Age2)

	// --- 直存字段: I32 ---
	args = append(args, FieldUser2_I32, p.I32)

	// --- 直存字段: I64 ---
	args = append(args, FieldUser2_I64, p.I64)

	// --- Gob 序列化字段: List ---
	{
		var buf bytes.Buffer
		if err := gob.NewEncoder(&buf).Encode(p.List); err != nil {
			return fmt.Errorf("gob 编码字段 %s 失败: %v", "List", err)
		}
		args = append(args, FieldUser2_List, buf.Bytes())
	}

	// --- Gob 序列化字段: U ---
	{
		var buf bytes.Buffer
		if err := gob.NewEncoder(&buf).Encode(p.U); err != nil {
			return fmt.Errorf("gob 编码字段 %s 失败: %v", "U", err)
		}
		args = append(args, FieldUser2_U, buf.Bytes())
	}

	// --- Gob 序列化字段: Mp ---
	{
		var buf bytes.Buffer
		if err := gob.NewEncoder(&buf).Encode(p.Mp); err != nil {
			return fmt.Errorf("gob 编码字段 %s 失败: %v", "Mp", err)
		}
		args = append(args, FieldUser2_Mp, buf.Bytes())
	}

	_, err := conn.Do("HSET", args...)
	return err
}

// GetFields 从 Redis Hash 中读取指定字段的值，填充到当前结构体实例中
// REDBKey, ida, idb: 与 SetFields 对应
// fields: 要读取的字段编号列表，如 FieldUser2_Name, FieldUser2_Age
func (p *User2) GetFields(conn redis.Conn, REDBKey uint32, ida, idb uint64, fields ...FieldUser2) error {
	key := fmt.Sprintf("REDB#%d:%d:%d", REDBKey, ida, idb)
	args := []interface{}{key}

	args = append(args, FieldUser2_Id2)

	args = append(args, FieldUser2_Name2)

	args = append(args, FieldUser2_Age2)

	args = append(args, FieldUser2_I32)

	args = append(args, FieldUser2_I64)

	args = append(args, FieldUser2_List)

	args = append(args, FieldUser2_U)

	args = append(args, FieldUser2_Mp)

	reply, err := redis.Values(conn.Do("HMGET", args...))
	if err != nil {
		return fmt.Errorf("HMGET 失败: %v", err)
	}

	// --- 直读字段: Id2 ---
	{
		val, err := redis.Bytes(reply[0], nil)
		if err != nil && err != redis.ErrNil {
			return fmt.Errorf("读取字段 %s 失败: %v", "Id2", err)
		}
		if val != nil {

			if id, err := strconv.ParseUint(string(val), 10, 64); err == nil {
				p.Id2 = id
			}

		}
	}

	// --- 直读字段: Name2 ---
	{
		val, err := redis.Bytes(reply[1], nil)
		if err != nil && err != redis.ErrNil {
			return fmt.Errorf("读取字段 %s 失败: %v", "Name2", err)
		}
		if val != nil {

			p.Name2 = string(val)

		}
	}

	// --- 直读字段: Age2 ---
	{
		val, err := redis.Bytes(reply[2], nil)
		if err != nil && err != redis.ErrNil {
			return fmt.Errorf("读取字段 %s 失败: %v", "Age2", err)
		}
		if val != nil {

			if id, err := strconv.ParseUint(string(val), 10, 32); err == nil {
				p.Age2 = uint32(id)
			}

		}
	}

	// --- 直读字段: I32 ---
	{
		val, err := redis.Bytes(reply[3], nil)
		if err != nil && err != redis.ErrNil {
			return fmt.Errorf("读取字段 %s 失败: %v", "I32", err)
		}
		if val != nil {

			if id, err := strconv.ParseInt(string(val), 10, 32); err == nil {
				p.I32 = int32(id)
			}

		}
	}

	// --- 直读字段: I64 ---
	{
		val, err := redis.Bytes(reply[4], nil)
		if err != nil && err != redis.ErrNil {
			return fmt.Errorf("读取字段 %s 失败: %v", "I64", err)
		}
		if val != nil {

			if id, err := strconv.ParseInt(string(val), 10, 64); err == nil {
				p.I64 = id
			}

		}
	}

	// --- Gob 反序列化字段: List ---
	{
		val, err := redis.Bytes(reply[5], nil)
		if err != nil && err != redis.ErrNil {
			return fmt.Errorf("读取字段 %s 失败: %v", "List", err)
		}
		if val != nil {
			if err := gob.NewDecoder(bytes.NewReader(val)).Decode(&p.List); err != nil {
				return fmt.Errorf("gob 反序列化字段 %s 失败: %v", "List", err)
			}
		}
	}

	// --- Gob 反序列化字段: U ---
	{
		val, err := redis.Bytes(reply[6], nil)
		if err != nil && err != redis.ErrNil {
			return fmt.Errorf("读取字段 %s 失败: %v", "U", err)
		}
		if val != nil {
			if err := gob.NewDecoder(bytes.NewReader(val)).Decode(&p.U); err != nil {
				return fmt.Errorf("gob 反序列化字段 %s 失败: %v", "U", err)
			}
		}
	}

	// --- Gob 反序列化字段: Mp ---
	{
		val, err := redis.Bytes(reply[7], nil)
		if err != nil && err != redis.ErrNil {
			return fmt.Errorf("读取字段 %s 失败: %v", "Mp", err)
		}
		if val != nil {
			if err := gob.NewDecoder(bytes.NewReader(val)).Decode(&p.Mp); err != nil {
				return fmt.Errorf("gob 反序列化字段 %s 失败: %v", "Mp", err)
			}
		}
	}

	return nil
}
