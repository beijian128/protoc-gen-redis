package generator

const codeTemplateHead = `
// Code generated by protoc-gen-redis. DO NOT EDIT.

package {{.PackageName}}

import (
	"bytes"
	"encoding/gob"
	"fmt"
	"strconv"
	"github.com/gomodule/redigo/redis"
)
`

const codeTemplate = `
// Field{{.MessageName}} 用于标识 Redis Hash 中的字段编号
type Field{{.MessageName}} uint32

{{range .Fields}}
// Field{{$.MessageName}}_{{.Name}} 是字段 {{.Name}} 对应的 Redis Hash field 编号
const Field{{$.MessageName}}_{{.Name}} Field{{$.MessageName}} = {{.ProtoTag}}
{{end}}

// Field{{.MessageName}}IDs 是所有字段编号常量的集合，类型为 []Field{{.MessageName}}
var Field{{.MessageName}}IDs = []Field{{.MessageName}}{
	{{range .Fields}}Field{{$.MessageName}}_{{.Name}},
	{{end}}
}

// {{.MessageName}} 提供针对 {{.MessageName}} 消息的 Redis 存取操作
type {{.MessageName}} struct {
	{{range .Fields}}
	{{.Name}} {{.GoType}}
	{{end}}
}

// New{{.MessageName}} 创建一个新的 {{.MessageName}} 实例
func New{{.MessageName}}() *{{.MessageName}} {
	return &{{.MessageName}}{}
}

// SetFields 将当前结构体实例的字段值，存储到 Redis Hash 中
// conn: Redis 连接
// REDBKey: 业务维度 Key
// ida, idb: 用于组成唯一 Hash Key 的两个 uint64 分片维度
// fields: 要存储的字段编号列表，如 Field{{.MessageName}}_Name, Field{{.MessageName}}_Age
//          如果 fields 为空（长度为 0），则默认存储所有字段（即 Field{{.MessageName}}IDs）
func (p *{{.MessageName}}) SetFields(conn redis.Conn, REDBKey uint32, ida, idb uint64, fields ...Field{{.MessageName}}) error {
	key := fmt.Sprintf("REDB#%d:%d:%d", REDBKey, ida, idb)
	args := []interface{}{key}

	// 决定要操作的字段列表
	fieldsToUse := fields
	if len(fieldsToUse) == 0 {
		fieldsToUse = Field{{.MessageName}}IDs
	}

	for _, fieldID := range fieldsToUse {
		fieldFound := false
		{{range .Fields}}
		if fieldID == Field{{$.MessageName}}_{{.Name}} {
			fieldFound = true
			{{if .IsGob}}
			// --- Gob 序列化字段: {{.Name}} ---
			{
				var buf bytes.Buffer
				if err := gob.NewEncoder(&buf).Encode(p.{{.Name}}); err != nil {
					return fmt.Errorf("gob 编码字段 %s 失败: %v", "{{.Name}}", err)
				}
				args = append(args, fieldID, buf.Bytes())
			}
			{{else}}
			// --- 直存字段: {{.Name}} ---
			args = append(args, fieldID, p.{{.Name}})
			{{end}}
		}
		{{end}}
		if !fieldFound {
			return fmt.Errorf("未知字段编号: %d", fieldID)
		}
	}

	_, err := conn.Do("HSET", args...)
	return err
}

`
